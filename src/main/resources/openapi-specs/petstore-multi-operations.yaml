openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
              examples:
                Fluffy: 
                  value:
                    - id: 1
                      name: Fluffy
                      tag: Persian
                    - id: 2
                      name: Doggy
                Peggy:
                  $ref: '#/components/examples/Peggies'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - pets
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                Peggy:
                  $ref: '#/components/examples/Peggy'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
    put:
      tags:
        - pets
      summary: Update a pet resource
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                Peggy:
                  value:
                    id: 3
                    name: Maxy
                    tag: Pug
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
              example: 
                id: 0
                name: Fluffy
                tag: Persian
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/findByStatus:
      get:
        tags:
          - pets
        summary: Finds Pets by status
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        parameters:
          - name: status
            in: query
            description: Status values that need to be considered for filter
            required: true
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - available
                  - pending
                  - sold
                default: available
        responses:
          '200':
            $ref: '#/components/responses/GoodResponse'
          '400':
            description: Invalid status value
  
components:
  responses:
    GoodResponse:
      description: Response for a 200 status code
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
      
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  examples:
    Peggies:
      value:
        - id: 1
          name: Peggy
          tag: Pug    
    Peggy:
      value:
        id: 1
        name: Peggy
        tag: Pug